{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 IBMPlexMono;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww17520\viewh11380\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0     public void update(double leftEncoderPos, double rightEncoderPos, double horizontalEncoderPos) \{\
        double deltaLeftEncoder = leftEncoderPos - prevLeftEncoder;\
        double deltaRightEncoder = rightEncoderPos - prevRightEncoder;\
        double deltaHorizontalEncoder = horizontalEncoderPos - prevHorizontalEncoder;\
\
        Rotation2d angle = previousAngle.plus(\
                new Rotation2d(\
                        (deltaLeftEncoder - deltaRightEncoder) / trackWidth\
                )\
        );\
\
        prevLeftEncoder = leftEncoderPos;\
        prevRightEncoder = rightEncoderPos;\
        prevHorizontalEncoder = horizontalEncoderPos;\
\
        double dw = (angle.minus(previousAngle).getRadians());\
\
        double dx = (deltaLeftEncoder + deltaRightEncoder) / 2;\
        double dy = deltaHorizontalEncoder - (centerWheelOffset * dw);\
\
        Twist2d twist2d = new Twist2d(dx, dy, dw);\
\
        Pose2d newPose = robotPose.exp(twist2d);\
\
        previousAngle = angle;\
\
        robotPose = new Pose2d(newPose.getTranslation(), angle);\
    \}}